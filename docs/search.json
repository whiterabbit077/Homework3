[
  {
    "objectID": "hw3.html",
    "href": "hw3.html",
    "title": "Homework #3",
    "section": "",
    "text": "1. If your working directory is myfolder/homework/, what relative path would you specify to get \nthe file located at myfolder/MyData.csv?\n&gt;  The relative path to get the file located at myfolder/MyData.csv would be ../MyData.csv\n\n2. What are the major benefits of using R projects?\n&gt; R projects have many great features. One of them is that they make work easy to reproduce. \nThis means that others, or even yourself in the future, can do the same work again without \nproblems. They also help keep work well organized keeping it tidy and easy to understand. \nLastly, the easy-to-move nature of R projects is very important. All these features are really \nhelpful when you need to work with others or move your work to a different computer. \n\n3. What is git and what is github?\n&gt; Git is a distributed version control system that allows multiple people to work on a project\nat the same time without overwriting each other’s changes. It keeps track of changes made to \nfiles and directories in a repository. GitHub is a web-based hosting service for Git \nrepositories. It provides a centralized location where developers can store, share, publish,\ntest, and collaborate on software development projects.\n\n4. What are the two main differences between a tibble and a data.frame?\n&gt; In my opinion two main differences are printing and rules for maintaining consistent data \ntypes within columns. When printing a tibble, the dimensions (number of rows and columns) \nare displayed, variable's types are displayed, plus tibbles print only the first 10 rows \nand all the columns that fit on the screen, making them more compact and easier to read, \nespecially with large datasets. In contrast, data.frames print the entire dataset by \ndefault, which can be overwhelming for large datasets. Furthermore, tibbles enforce stricter\nrules for maintaining consistent data types within columns. When you create or modify \na tibble, it will attempt to preserve the data types of its columns. This consistency \nhelps prevent unexpected type conversions that can occur in data.frames, where operations \nmay coerce data types to be uniform across columns. It makes it tibble sometimes painfull \nto work with but prevents from unexpected data errors in a long run. \n\n5. Rewrite the following nested function call using baseR’s chaining operator: \narrange(filter(select(as_tibble(iris), starts_with(\"Petal\"), Species), Petal.Length \\&lt; 1.55), \nSpecies)\n&gt;iris |&gt;\nas_tibble() |&gt; \nselect(starts_with(\"Petal\"),Species) |&gt;\nfilter(Petal.Legth &lt;1.55) |&gt; \narrange(Species)\n\n6. What is meant by long format data and wide format data? Which do we generally prefer for \nstatistical analysis?\n&gt; Long format data has each row representing a single observation, with each variable in its\nown column. This format is ideal for representing data over time or across different conditions.\nIn contrast, wide format data has each row representing a single individual or unit, with \nvariables in separate columns. While wide format is useful for summarizing data or comparing \nvariables across groups, long format is generally preferred for statistical analysis due to \nits flexibility and suitability for statistical modelling."
  },
  {
    "objectID": "hw3.html#task-1-conceptual-questions",
    "href": "hw3.html#task-1-conceptual-questions",
    "title": "Homework #3",
    "section": "",
    "text": "1. If your working directory is myfolder/homework/, what relative path would you specify to get \nthe file located at myfolder/MyData.csv?\n&gt;  The relative path to get the file located at myfolder/MyData.csv would be ../MyData.csv\n\n2. What are the major benefits of using R projects?\n&gt; R projects have many great features. One of them is that they make work easy to reproduce. \nThis means that others, or even yourself in the future, can do the same work again without \nproblems. They also help keep work well organized keeping it tidy and easy to understand. \nLastly, the easy-to-move nature of R projects is very important. All these features are really \nhelpful when you need to work with others or move your work to a different computer. \n\n3. What is git and what is github?\n&gt; Git is a distributed version control system that allows multiple people to work on a project\nat the same time without overwriting each other’s changes. It keeps track of changes made to \nfiles and directories in a repository. GitHub is a web-based hosting service for Git \nrepositories. It provides a centralized location where developers can store, share, publish,\ntest, and collaborate on software development projects.\n\n4. What are the two main differences between a tibble and a data.frame?\n&gt; In my opinion two main differences are printing and rules for maintaining consistent data \ntypes within columns. When printing a tibble, the dimensions (number of rows and columns) \nare displayed, variable's types are displayed, plus tibbles print only the first 10 rows \nand all the columns that fit on the screen, making them more compact and easier to read, \nespecially with large datasets. In contrast, data.frames print the entire dataset by \ndefault, which can be overwhelming for large datasets. Furthermore, tibbles enforce stricter\nrules for maintaining consistent data types within columns. When you create or modify \na tibble, it will attempt to preserve the data types of its columns. This consistency \nhelps prevent unexpected type conversions that can occur in data.frames, where operations \nmay coerce data types to be uniform across columns. It makes it tibble sometimes painfull \nto work with but prevents from unexpected data errors in a long run. \n\n5. Rewrite the following nested function call using baseR’s chaining operator: \narrange(filter(select(as_tibble(iris), starts_with(\"Petal\"), Species), Petal.Length \\&lt; 1.55), \nSpecies)\n&gt;iris |&gt;\nas_tibble() |&gt; \nselect(starts_with(\"Petal\"),Species) |&gt;\nfilter(Petal.Legth &lt;1.55) |&gt; \narrange(Species)\n\n6. What is meant by long format data and wide format data? Which do we generally prefer for \nstatistical analysis?\n&gt; Long format data has each row representing a single observation, with each variable in its\nown column. This format is ideal for representing data over time or across different conditions.\nIn contrast, wide format data has each row representing a single individual or unit, with \nvariables in separate columns. While wide format is useful for summarizing data or comparing \nvariables across groups, long format is generally preferred for statistical analysis due to \nits flexibility and suitability for statistical modelling."
  },
  {
    "objectID": "hw3.html#task-2-reading-delimited-data",
    "href": "hw3.html#task-2-reading-delimited-data",
    "title": "Homework #3",
    "section": "Task 2 Reading Delimited Data",
    "text": "Task 2 Reading Delimited Data\n\nGlass Data\nRead data from URL:\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ ggplot2   3.5.0     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.0\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(readr)\n\nglass &lt;- read_delim(\"https://www4.stat.ncsu.edu/~online/datasets/glass.data\", \n                       delim = \",\",\n                       col_names = c(\"Id\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\",\"K\",\"Ca\",\"Ba\",\"Fe\",\"Type_of_Glass\")\n)\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): Id, RI, Na, Mg, Al, Si, K, Ca, Ba, Fe, Type_of_Glass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglass\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_Glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0                1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0                1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0                1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0                1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0                1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26             1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0                1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0                1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0                1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11             1\n# ℹ 204 more rows\n\n\nStart a chain that would overwrite the Type_of_glass variable using mutate().\n\nglass |&gt;\n  mutate(Type_of_Glass = case_when(\n    Type_of_Glass == 1 ~ \"building_windows_float_processed\",\n    Type_of_Glass == 2 ~ \"building_windows_non_float_processed\",\n    Type_of_Glass == 3 ~ \"vehicle_windows_float_processed\",\n    Type_of_Glass == 4 ~ \"vehicle_windows_non_float_processed\",\n    Type_of_Glass == 5 ~ \"containers\",\n    Type_of_Glass == 6 ~ \"tableware\",\n    Type_of_Glass == 7 ~ \"headlamps\",\n    TRUE ~ as.character(Type_of_Glass)\n  ))\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_Glass    \n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;            \n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0    building_windows…\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0    building_windows…\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0    building_windows…\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0    building_windows…\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0    building_windows…\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26 building_windows…\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0    building_windows…\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0    building_windows…\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0    building_windows…\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11 building_windows…\n# ℹ 204 more rows\n\n\nkeep only observations where the Fe variable is less than 0.2 and the Type of Glass is either “tableware” or “headlamp”\n\nglass |&gt;\n  mutate(Type_of_Glass = case_when(\n    Type_of_Glass == 1 ~ \"building_windows_float_processed\",\n    Type_of_Glass == 2 ~ \"building_windows_non_float_processed\",\n    Type_of_Glass == 3 ~ \"vehicle_windows_float_processed\",\n    Type_of_Glass == 4 ~ \"vehicle_windows_non_float_processed\",\n    Type_of_Glass == 5 ~ \"containers\",\n    Type_of_Glass == 6 ~ \"tableware\",\n    Type_of_Glass == 7 ~ \"headlamps\",\n    TRUE ~ as.character(Type_of_Glass)\n  )) |&gt;\n  filter(Fe&lt;0.2 & Type_of_Glass %in% c(\"tableware\",\"headlamps\"))\n\n# A tibble: 38 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_Glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;        \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0        0 tableware    \n 2   178  1.52  13.8  2.41  1.19  72.8  0     9.77  0        0 tableware    \n 3   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0        0 tableware    \n 4   180  1.52  14.1  2.19  1.66  72.7  0     9.32  0        0 tableware    \n 5   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0        0 tableware    \n 6   182  1.52  15.0  0.78  1.74  72.5  0     9.95  0        0 tableware    \n 7   183  1.52  14.2  0     2.09  72.7  0    10.9   0        0 tableware    \n 8   184  1.52  14.6  0     0.56  73.5  0    11.2   0        0 tableware    \n 9   185  1.51  17.4  0     0.34  75.4  0     6.65  0        0 tableware    \n10   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19     0 headlamps    \n# ℹ 28 more rows\n\n\n\n\nYeast Data\nRead data\n\nyeast &lt;- read_fwf(\"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\",\n                  fwf_widths(c(12,6,6,6,6,6,6,6,6,3),\n                             c(\"seq_name\",\"mcg\",\"gvh\",\"alm\",\"mit\",\"erl\",\"pox\",\"vac\",\"nuc\",\"class\"))\n                  )\n\nRows: 1484 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\n\nchr (2): seq_name, class\ndbl (8): mcg, gvh, alm, mit, erl, pox, vac, nuc\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nyeast\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n\nStart a chain that removes the seq_name and nuc columns.\n\nyeast |&gt;\n  select(-seq_name, -nuc)\n\n# A tibble: 1,484 × 8\n     mcg   gvh   alm   mit   erl   pox   vac class\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT  \n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT  \n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT  \n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC  \n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT  \n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT  \n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT  \n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC  \n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT  \n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT  \n# ℹ 1,474 more rows\n\n\nContinue your chain to add columns corresponding to the mean and median of each numeric variable (mcg, gvh, alm, mit, erl, pox, and vac) at each class grouping.\n\nyeast |&gt;\n  select(-seq_name, -nuc) |&gt;\n  group_by(class) |&gt;\n  mutate(across(where(is.numeric),list(mean=mean,median=median),\n                .names = \"{.col}_{.fn}\"))\n\n# A tibble: 1,484 × 22\n# Groups:   class [10]\n     mcg   gvh   alm   mit   erl   pox   vac class mcg_mean mcg_median gvh_mean\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT      0.521       0.51    0.533\n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT      0.521       0.51    0.533\n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT      0.521       0.51    0.533\n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC      0.452       0.45    0.456\n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT      0.521       0.51    0.533\n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.481       0.48    0.470\n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT      0.521       0.51    0.533\n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC      0.452       0.45    0.456\n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT      0.521       0.51    0.533\n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT      0.481       0.48    0.470\n# ℹ 1,474 more rows\n# ℹ 11 more variables: gvh_median &lt;dbl&gt;, alm_mean &lt;dbl&gt;, alm_median &lt;dbl&gt;,\n#   mit_mean &lt;dbl&gt;, mit_median &lt;dbl&gt;, erl_mean &lt;dbl&gt;, erl_median &lt;dbl&gt;,\n#   pox_mean &lt;dbl&gt;, pox_median &lt;dbl&gt;, vac_mean &lt;dbl&gt;, vac_median &lt;dbl&gt;"
  },
  {
    "objectID": "hw3.html#task-2-combining-excel-and-delimited-data",
    "href": "hw3.html#task-2-combining-excel-and-delimited-data",
    "title": "Homework #3",
    "section": "Task 2: Combining Excel and Delimited Data",
    "text": "Task 2: Combining Excel and Delimited Data\n\nImport the data from the first sheet using the readxl package and print out the tibble\n\n\nlibrary(readxl)\nwhite_wine &lt;- read_excel(\"data/white-wine.xlsx\")\nwhite_wine\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n2.a. Read in the data from the 2nd sheet. This should return a data frame with one column containing alternative versions of the variable\n\ncnames &lt;- read_excel(\"data/white-wine.xlsx\",sheet = 2)\ncnames\n\n# A tibble: 12 × 1\n   Variables           \n   &lt;chr&gt;               \n 1 fixed_acidity       \n 2 volatile_acidity    \n 3 citric_acid         \n 4 residual_sugar      \n 5 chlorides           \n 6 free_sulfur_dioxide \n 7 total_sulfur_dioxide\n 8 density             \n 9 pH                  \n10 sulphates           \n11 alcohol             \n12 quality             \n\n\n2.b. Grab that column and overwrite the current column names (colnames()) of your white_wine tibble.\n\ncolnames(white_wine) &lt;- cnames$Variables\ncolnames(white_wine)\n\n [1] \"fixed_acidity\"        \"volatile_acidity\"     \"citric_acid\"         \n [4] \"residual_sugar\"       \"chlorides\"            \"free_sulfur_dioxide\" \n [7] \"total_sulfur_dioxide\" \"density\"              \"pH\"                  \n[10] \"sulphates\"            \"alcohol\"              \"quality\"             \n\n\n\nLastly, add a column to this data set to indicate the wines are white. That is, add a column that has values of ‘white’ for every observation.\n\n\nwhite_wine &lt;-\n  white_wine |&gt;\n  mutate(w_type = \"white\")\nwhite_wine\n\n# A tibble: 4,898 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   w_type &lt;chr&gt;\n\n\n\nRepeat same steps for red wine csv file\n\n\nred_wine &lt;- read_delim(\"data/red-wine.csv\")\n\nRows: 1599 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nred_wine\n\n# A tibble: 1,599 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1             7.4               0.7           0                 1.9     0.076\n 2             7.8               0.88          0                 2.6     0.098\n 3             7.8               0.76          0.04              2.3     0.092\n 4            11.2               0.28          0.56              1.9     0.075\n 5             7.4               0.7           0                 1.9     0.076\n 6             7.4               0.66          0                 1.8     0.075\n 7             7.9               0.6           0.06              1.6     0.069\n 8             7.3               0.65          0                 1.2     0.065\n 9             7.8               0.58          0.02              2       0.073\n10             7.5               0.5           0.36              6.1     0.071\n# ℹ 1,589 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n#col names\ncolnames(red_wine) &lt;- cnames$Variables\ncolnames(red_wine)\n\n [1] \"fixed_acidity\"        \"volatile_acidity\"     \"citric_acid\"         \n [4] \"residual_sugar\"       \"chlorides\"            \"free_sulfur_dioxide\" \n [7] \"total_sulfur_dioxide\" \"density\"              \"pH\"                  \n[10] \"sulphates\"            \"alcohol\"              \"quality\"             \n\n#add wine type column\nred_wine &lt;-\n  red_wine |&gt;\n  mutate(w_type = \"red\")\nred_wine\n\n# A tibble: 1,599 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1           7.4             0.7         0               1.9     0.076\n 2           7.8             0.88        0               2.6     0.098\n 3           7.8             0.76        0.04            2.3     0.092\n 4          11.2             0.28        0.56            1.9     0.075\n 5           7.4             0.7         0               1.9     0.076\n 6           7.4             0.66        0               1.8     0.075\n 7           7.9             0.6         0.06            1.6     0.069\n 8           7.3             0.65        0               1.2     0.065\n 9           7.8             0.58        0.02            2       0.073\n10           7.5             0.5         0.36            6.1     0.071\n# ℹ 1,589 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   w_type &lt;chr&gt;\n\n\n\nCombine these two data sets into one data set.\n\n\nall_wines &lt;- dplyr::bind_rows(white_wine, red_wine)\nall_wines\n\n# A tibble: 6,497 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 6,487 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   w_type &lt;chr&gt;\n\n\n\nStart a chain on your new combined data object to filter the data to only look at high-quality wines (quality &gt; 6.5) and wines that have a reasonable alcohol value (alcohol &lt; 132).\n\n\nall_wines |&gt;\n  filter(quality &gt; 6.5 & alcohol &lt; 132)\n\n# A tibble: 1,206 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1            66             0.16        0.4             1.5     0.044\n 2            66             0.17        0.38            1.5     0.032\n 3            62             0.66        0.48            1.2     0.029\n 4            62             0.66        0.48            1.2     0.029\n 5            64             0.31        0.38            2.9     0.038\n 6            68             0.26        0.42            1.7     0.049\n 7            72             0.32        0.36            2       0.033\n 8            74             0.18        0.31            1.4     0.058\n 9            66             0.25        0.29            1.1     0.068\n10            62             0.16        0.33            1.1     0.057\n# ℹ 1,196 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   w_type &lt;chr&gt;\n\n\n\nContinue your chain to now sort the data from highest quality to lowest.\n\n\nall_wines |&gt;\n  filter(quality &gt; 6.5 & alcohol &lt; 132) |&gt;\n  arrange(desc(quality))\n\n# A tibble: 1,206 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1            91             0.27        0.45           10.6     0.035\n 2            66             0.36        0.29            1.6     0.021\n 3            74             0.24        0.36            2       0.031\n 4            69             0.36        0.34            4.2     0.018\n 5            71             0.26        0.49            2.2     0.032\n 6            62             0.66        0.48            1.2     0.029\n 7            62             0.66        0.48            1.2     0.029\n 8            68             0.26        0.42            1.7     0.049\n 9            67             0.23        0.31            2.1     0.046\n10            67             0.23        0.31            2.1     0.046\n# ℹ 1,196 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   w_type &lt;chr&gt;\n\n\n8.Continue your chain to select only the variables that contain acid, the alcohol variable, the type variable, and the quality variable.\n\nall_wines |&gt;\n  filter(quality &gt; 6.5 & alcohol &lt; 132) |&gt;\n  arrange(desc(quality)) |&gt;\n  select(contains(\"acid\"),alcohol,w_type,quality)\n\n# A tibble: 1,206 × 6\n   fixed_acidity volatile_acidity citric_acid alcohol w_type quality\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;\n 1            91             0.27        0.45     104 white        9\n 2            66             0.36        0.29     124 white        9\n 3            74             0.24        0.36     125 white        9\n 4            69             0.36        0.34     127 white        9\n 5            71             0.26        0.49     129 white        9\n 6            62             0.66        0.48     128 white        8\n 7            62             0.66        0.48     128 white        8\n 8            68             0.26        0.42     105 white        8\n 9            67             0.23        0.31     107 white        8\n10            67             0.23        0.31     107 white        8\n# ℹ 1,196 more rows\n\n\n\nContinue your chain to add the mean and standard deviation of the alcohol variable to the data set for each setting of the quality variable\n\n\nall_wines |&gt;\n  filter(quality &gt; 6.5 & alcohol &lt; 132) |&gt;\n  arrange(desc(quality)) |&gt;\n  select(contains(\"acid\"),alcohol,w_type,quality) |&gt;\n  group_by(quality) |&gt;\n  mutate(across(alcohol,list(mean=mean,sd=sd),\n                .names = \"{.col}_{.fn}\"))\n\n# A tibble: 1,206 × 8\n# Groups:   quality [3]\n   fixed_acidity volatile_acidity citric_acid alcohol w_type quality\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;\n 1            91             0.27        0.45     104 white        9\n 2            66             0.36        0.29     124 white        9\n 3            74             0.24        0.36     125 white        9\n 4            69             0.36        0.34     127 white        9\n 5            71             0.26        0.49     129 white        9\n 6            62             0.66        0.48     128 white        8\n 7            62             0.66        0.48     128 white        8\n 8            68             0.26        0.42     105 white        8\n 9            67             0.23        0.31     107 white        8\n10            67             0.23        0.31     107 white        8\n# ℹ 1,196 more rows\n# ℹ 2 more variables: alcohol_mean &lt;dbl&gt;, alcohol_sd &lt;dbl&gt;"
  },
  {
    "objectID": "hw3.html#task-3-database-practice",
    "href": "hw3.html#task-3-database-practice",
    "title": "Homework #3",
    "section": "Task 3: Database Practice",
    "text": "Task 3: Database Practice\n\nConnect to the database and then look at all of the tables in the database.\n\n\nlibrary(RSQLite)\nlibrary(DBI)\ncon &lt;- dbConnect(RSQLite::SQLite(), \"data/lahman.db\")\n\ndbListTables(con)\n\n [1] \"AllstarFull\"         \"Appearances\"         \"AwardsManagers\"     \n [4] \"AwardsPlayers\"       \"AwardsShareManagers\" \"AwardsSharePlayers\" \n [7] \"Batting\"             \"BattingPost\"         \"CollegePlaying\"     \n[10] \"Fielding\"            \"FieldingOF\"          \"FieldingOFsplit\"    \n[13] \"FieldingPost\"        \"HallOfFame\"          \"HomeGames\"          \n[16] \"LahmanData\"          \"Managers\"            \"ManagersHalf\"       \n[19] \"Parks\"               \"People\"              \"Pitching\"           \n[22] \"PitchingPost\"        \"Salaries\"            \"Schools\"            \n[25] \"SeriesPost\"          \"Teams\"               \"TeamsFranchises\"    \n[28] \"TeamsHalf\"           \"battingLabels\"       \"fieldingLabels\"     \n[31] \"pitchingLabels\"     \n\n\n\nUse the tbl() function and dplyr to return all of the data from the Teams table for the year 2015.\n\n\nlibrary(dplyr)\ntbl(con, \"Teams\") |&gt;\n  filter(yearID == 2015) |&gt;\n  collect()\n\n# A tibble: 30 × 48\n   yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n    &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;\n 1   2015 NL    ARI    ARI      W         3   162    81    79    83 N      N    \n 2   2015 NL    ATL    ATL      E         4   162    81    67    95 N      N    \n 3   2015 AL    BAL    BAL      E         3   162    78    81    81 N      N    \n 4   2015 AL    BOS    BOS      E         5   162    81    78    84 N      N    \n 5   2015 AL    CHA    CHW      C         4   162    81    76    86 N      N    \n 6   2015 NL    CHN    CHC      C         3   162    81    97    65 N      Y    \n 7   2015 NL    CIN    CIN      C         5   162    81    64    98 N      N    \n 8   2015 AL    CLE    CLE      C         3   161    80    81    80 N      N    \n 9   2015 NL    COL    COL      W         5   162    81    68    94 N      N    \n10   2015 AL    DET    DET      C         5   161    81    74    87 N      N    \n# ℹ 20 more rows\n# ℹ 36 more variables: LgWin &lt;chr&gt;, WSWin &lt;chr&gt;, R &lt;int&gt;, AB &lt;int&gt;, H &lt;int&gt;,\n#   X2B &lt;int&gt;, X3B &lt;int&gt;, HR &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;,\n#   HBP &lt;int&gt;, SF &lt;int&gt;, RA &lt;int&gt;, ER &lt;int&gt;, ERA &lt;dbl&gt;, CG &lt;int&gt;, SHO &lt;int&gt;,\n#   SV &lt;int&gt;, IPouts &lt;int&gt;, HA &lt;int&gt;, HRA &lt;int&gt;, BBA &lt;int&gt;, SOA &lt;int&gt;, E &lt;int&gt;,\n#   DP &lt;int&gt;, FP &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;, attendance &lt;int&gt;, BPF &lt;int&gt;,\n#   PPF &lt;int&gt;, teamIDBR &lt;chr&gt;, teamIDlahman45 &lt;chr&gt;, teamIDretro &lt;chr&gt;\n\n\n\nRepeat the above by using the sql() function within tbl()\n\n\ntbl(con,sql(\"SELECT *\nFROM Teams\nWHERE yearID = 2015.0\")) |&gt;\n  collect()\n\n# A tibble: 30 × 48\n   yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n    &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;\n 1   2015 NL    ARI    ARI      W         3   162    81    79    83 N      N    \n 2   2015 NL    ATL    ATL      E         4   162    81    67    95 N      N    \n 3   2015 AL    BAL    BAL      E         3   162    78    81    81 N      N    \n 4   2015 AL    BOS    BOS      E         5   162    81    78    84 N      N    \n 5   2015 AL    CHA    CHW      C         4   162    81    76    86 N      N    \n 6   2015 NL    CHN    CHC      C         3   162    81    97    65 N      Y    \n 7   2015 NL    CIN    CIN      C         5   162    81    64    98 N      N    \n 8   2015 AL    CLE    CLE      C         3   161    80    81    80 N      N    \n 9   2015 NL    COL    COL      W         5   162    81    68    94 N      N    \n10   2015 AL    DET    DET      C         5   161    81    74    87 N      N    \n# ℹ 20 more rows\n# ℹ 36 more variables: LgWin &lt;chr&gt;, WSWin &lt;chr&gt;, R &lt;int&gt;, AB &lt;int&gt;, H &lt;int&gt;,\n#   X2B &lt;int&gt;, X3B &lt;int&gt;, HR &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;,\n#   HBP &lt;int&gt;, SF &lt;int&gt;, RA &lt;int&gt;, ER &lt;int&gt;, ERA &lt;dbl&gt;, CG &lt;int&gt;, SHO &lt;int&gt;,\n#   SV &lt;int&gt;, IPouts &lt;int&gt;, HA &lt;int&gt;, HRA &lt;int&gt;, BBA &lt;int&gt;, SOA &lt;int&gt;, E &lt;int&gt;,\n#   DP &lt;int&gt;, FP &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;, attendance &lt;int&gt;, BPF &lt;int&gt;,\n#   PPF &lt;int&gt;, teamIDBR &lt;chr&gt;, teamIDlahman45 &lt;chr&gt;, teamIDretro &lt;chr&gt;\n\n\n\nReturn all of the players in the hall of fame, the year they were voted into the hall of fame, and their category (only those three variables!). See the HallOfFame table, the inducted variable is important here.\n\n\nhof &lt;- tbl(con, \"HallOfFame\") |&gt; \n  select(playerID, yearID, category) |&gt; \n  collect()\nhof\n\n# A tibble: 4,323 × 3\n   playerID  yearID category\n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;   \n 1 cobbty01    1936 Player  \n 2 ruthba01    1936 Player  \n 3 wagneho01   1936 Player  \n 4 mathech01   1936 Player  \n 5 johnswa01   1936 Player  \n 6 lajoina01   1936 Player  \n 7 speaktr01   1936 Player  \n 8 youngcy01   1936 Player  \n 9 hornsro01   1936 Player  \n10 cochrmi01   1936 Player  \n# ℹ 4,313 more rows\n\n\n\nCombine the table from the previous question with the People table in order to have the nameFirst and nameLast names added to what was returned above.\n\n\nppl &lt;- tbl(con, \"People\") |&gt; \n  select(playerID, nameFirst, nameLast) |&gt; \n  collect()\nppl\n\n# A tibble: 20,676 × 3\n   playerID  nameFirst nameLast   \n   &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;      \n 1 aardsda01 David     Aardsma    \n 2 aaronha01 Hank      Aaron      \n 3 aaronto01 Tommie    Aaron      \n 4 aasedo01  Don       Aase       \n 5 abadan01  Andy      Abad       \n 6 abadfe01  Fernando  Abad       \n 7 abadijo01 John      Abadie     \n 8 abbated01 Ed        Abbaticchio\n 9 abbeybe01 Bert      Abbey      \n10 abbeych01 Charlie   Abbey      \n# ℹ 20,666 more rows\n\n#join\nppl_w_names &lt;- left_join(hof,ppl,by = join_by(playerID == playerID))\nppl_w_names\n\n# A tibble: 4,323 × 5\n   playerID  yearID category nameFirst nameLast \n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;    \n 1 cobbty01    1936 Player   Ty        Cobb     \n 2 ruthba01    1936 Player   Babe      Ruth     \n 3 wagneho01   1936 Player   Honus     Wagner   \n 4 mathech01   1936 Player   Christy   Mathewson\n 5 johnswa01   1936 Player   Walter    Johnson  \n 6 lajoina01   1936 Player   Nap       Lajoie   \n 7 speaktr01   1936 Player   Tris      Speaker  \n 8 youngcy01   1936 Player   Cy        Young    \n 9 hornsro01   1936 Player   Rogers    Hornsby  \n10 cochrmi01   1936 Player   Mickey    Cochrane \n# ℹ 4,313 more rows\n\n\n\nManagers related tasks\n\n\n#Determine the overall win/loss records\ntbl(con, \"Managers\") |&gt; \n  select(playerID, G, W, L) |&gt;\n  group_by(playerID) |&gt;\n  summarize(G_managed = sum(G, na.rm = TRUE),\n            Total_W = sum(W, na.rm = TRUE),\n            Total_L = sum(L, na.rm = TRUE)) |&gt;\n  collect() \n\n# A tibble: 749 × 4\n   playerID  G_managed Total_W Total_L\n   &lt;chr&gt;         &lt;int&gt;   &lt;int&gt;   &lt;int&gt;\n 1 actama99        890     372     518\n 2 adairbi99        10       4       6\n 3 adcocjo01       162      75      87\n 4 addybo01         31       8      23\n 5 allenbo01       179      87      87\n 6 allisdo01        23       2      21\n 7 alomasa02        13       8       5\n 8 aloufe01       2053    1033    1020\n 9 alstowa01      3658    2040    1613\n10 altobjo01       844     437     407\n# ℹ 739 more rows\n\n#Create a new variable that is the career win/loss percentage (Total_W/G_managed).\n#Sort the resulting data by the win/loss percentage variable (from largest to smallest)\ntbl(con, \"Managers\") |&gt; \n  select(playerID, G, W, L) |&gt;\n  group_by(playerID) |&gt;\n  summarize(G_managed = sum(G, na.rm = TRUE),\n            Total_W = sum(W, na.rm = TRUE),\n            Total_L = sum(L, na.rm = TRUE)) |&gt;\n  collect() |&gt;\n  mutate(w_l_percent = round((Total_W/G_managed)*100,2)) |&gt;\n  arrange(desc(w_l_percent))\n\n# A tibble: 749 × 5\n   playerID  G_managed Total_W Total_L w_l_percent\n   &lt;chr&gt;         &lt;int&gt;   &lt;int&gt;   &lt;int&gt;       &lt;dbl&gt;\n 1 bensove01         1       1       0         100\n 2 burwebi01         1       1       0         100\n 3 cohenan01         1       1       0         100\n 4 ebeldi99          3       3       0         100\n 5 falkbi01          1       1       0         100\n 6 hardeme01         3       3       0         100\n 7 simmote01         1       1       0         100\n 8 steinte01         2       2       0         100\n 9 sukefcl01         2       2       0         100\n10 tamarjo01         1       1       0         100\n# ℹ 739 more rows\n\n\n\nUse the results from the previous two questions to answer this one! Return information for only the people that managed a team and were inducted into the hall of fame (regardless of their category in the hall of fame - you want to return all people in the hall of fame that ever managed at all). (Just return all of the variables from both of the above two questions - 9 total columns)\n\n\nmanagers &lt;- tbl(con, \"Managers\") |&gt; \n  select(playerID, G, W, L) |&gt;\n  group_by(playerID) |&gt;\n  summarize(G_managed = sum(G, na.rm = TRUE),\n            Total_W = sum(W, na.rm = TRUE),\n            Total_L = sum(L, na.rm = TRUE)) |&gt;\n  collect() |&gt;\n  mutate(w_l_percent = round((Total_W/G_managed)*100,2)) |&gt;\n  arrange(desc(w_l_percent)) |&gt; \n  collect()\n\ninner_join(managers,\n           ppl_w_names, \n           by = join_by(playerID == playerID))\n\n# A tibble: 1,135 × 9\n   playerID  G_managed Total_W Total_L w_l_percent yearID category nameFirst\n   &lt;chr&gt;         &lt;int&gt;   &lt;int&gt;   &lt;int&gt;       &lt;dbl&gt;  &lt;int&gt; &lt;chr&gt;    &lt;chr&gt;    \n 1 hardeme01         3       3       0         100   1949 Player   Mel      \n 2 hardeme01         3       3       0         100   1950 Player   Mel      \n 3 hardeme01         3       3       0         100   1951 Player   Mel      \n 4 hardeme01         3       3       0         100   1952 Player   Mel      \n 5 hardeme01         3       3       0         100   1953 Player   Mel      \n 6 hardeme01         3       3       0         100   1958 Player   Mel      \n 7 hardeme01         3       3       0         100   1960 Player   Mel      \n 8 hardeme01         3       3       0         100   1962 Player   Mel      \n 9 hardeme01         3       3       0         100   1964 Player   Mel      \n10 hardeme01         3       3       0         100   1964 Player   Mel      \n# ℹ 1,125 more rows\n# ℹ 1 more variable: nameLast &lt;chr&gt;\n\n\nDiconnect from a database\n\ndbDisconnect(con)"
  }
]