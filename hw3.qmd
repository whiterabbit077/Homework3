---
title: "Homework #3"
format: html
editor: visual
---

## Task 1: Conceptual Questions

``` markdown
1. If your working directory is myfolder/homework/, what relative path would you specify to get 
the file located at myfolder/MyData.csv?
>  The relative path to get the file located at myfolder/MyData.csv would be ../MyData.csv

2. What are the major benefits of using R projects?
> R projects have many great features. One of them is that they make work easy to reproduce. 
This means that others, or even yourself in the future, can do the same work again without 
problems. They also help keep work well organized keeping it tidy and easy to understand. 
Lastly, the easy-to-move nature of R projects is very important. All these features are really 
helpful when you need to work with others or move your work to a different computer. 

3. What is git and what is github?
> Git is a distributed version control system that allows multiple people to work on a project
at the same time without overwriting each other’s changes. It keeps track of changes made to 
files and directories in a repository. GitHub is a web-based hosting service for Git 
repositories. It provides a centralized location where developers can store, share, publish,
test, and collaborate on software development projects.

4. What are the two main differences between a tibble and a data.frame?
> In my opinion two main differences are priting and rules for maintaining consistent data 
types within columns. When printing a tibble, the dimensions (number of rows and columns) 
are displayed, variable's types are displayed, plus tibbles print only the first 10 rows 
and all the columns that fit on the screen, making them more compact and easier to read, 
especially with large datasets. In contrast, data.frames print the entire dataset by 
default, which can be overwhelming for large datasets. Furthermore, tibbles enforce stricter
rules for maintaining consistent data types within columns. When you create or modify 
a tibble, it will attempt to preserve the data types of its columns. This consistency 
helps prevent unexpected type conversions that can occur in data.frames, where operations 
may coerce data types to be uniform across columns. It makes it tibble sometimes painfull 
to work with but prevents from unexpected data errors in a long run. 

5. Rewrite the following nested function call using baseR’s chaining operator: 
arrange(filter(select(as_tibble(iris), starts_with("Petal"), Species), Petal.Length \< 1.55), Species)
>library(dplyr) 

>iris |>
as_tibble() |> 
select(starts_with("Petal"),Species) |>
filter(Petal.Legth <1.55) |> 
arrange(Species)

6. What is meant by long format data and wide format data? Which do we generally prefer for 
statistical analysis?
> Long format data has each row representing a single observation, with each variable in its
own column. This format is ideal for representing data over time or across different conditions.
In contrast, wide format data has each row representing a single individual or unit, with 
variables in separate columns. While wide format is useful for summarizing data or comparing 
variables across groups, long format is generally preferred for statistical analysis due to 
its flexibility and suitability for statistical modelling.
```

## Task 2 Reading Delimited Data

## Task 2: Combining Excel and Delimited Data

## Task 3: Database Practice
